



Network Working Group                                           E. Omara
Internet-Draft                                                    Google
Intended status: Informational                                 R. Robert
Expires: 11 November 2022                                    10 May 2022


             The Messaging Layer Security (MLS) Federation
                    draft-ietf-mls-federation-latest

Abstract

   This document describes how the Messaging Layer Security (MLS)
   protocol can be used in a federated environment.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Source for this draft and an issue tracker can be found at
   https://github.com/mlswg/mls-federation.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 11 November 2022.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology
   3.  Federated environments
     3.1.  Delivery Services
       3.1.1.  Key packages
     3.2.  Authentication Service
   4.  Further considerations
   5.  Use cases
     5.1.  Different Delivery Servers
     5.2.  Different client applications
   6.  Functional Requirements
     6.1.  Delivery service
   7.  Security Considerations
     7.1.  Version & ciphersuite negotiation
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Authors' Addresses

1.  Introduction

   MLS Architecture draft [I-D.ietf-mls-architecture] describes the
   overall MLS system architecture, assuming the client and servers
   (Delivery Service and Authentication Service) are operated by the
   same entity.  This is however not a strict requirement, the MLS
   protocol does not have an inherent dependency on one single entity
   and can instead be used between multiple entities.

   This document describes the minimum changes needed to allow different
   MLS clients operated by the same or different entities to communicate
   with each and explaining the use cases where federation could be
   useful.

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Client:  An agent that uses the MLS protocol to establish shared
      cryptographic state with other clients.  A client is defined by
      the cryptographic keys it holds.  An application or user may use
      one client per device (keeping keys local to each device) or sync
      keys among a user's devices so that each user appears as a single
      client.

   Key package:  A short-lived HPKE [I-D.irtf-cfrg-hpke] key pair used
      to introduce a new client to a group.  Initialization keys are
      published for each client (KeyPackage).

   Identity Key:  A long-lived signing key pair used to authenticate the
      sender of a message.

   We use the TLS presentation language [RFC8446] to describe the
   structure of protocol messages.

3.  Federated environments

   Federated environments are environments where multiple entities are
   operating independent MLS services.  In particular, the assumption is
   that Delivery Services and Authentication Services are not
   necessarily operated by the same entity.

   The focus of this document will be on the different components of the
   MLS architecture.

3.1.  Delivery Services

   The below diagram shows an MLS group where all clients are operated
   under the same deliver service:

                          +------------+
                         + Delivery     +
                         + Service (DS) +
                          +-----+------+
                       /        +        \             Group
   *********************************************************
   *                 /          +          \               *
   *                /           |           \              *
   *      +--------+       +----+---+       +--------+     *
   *     + Client 0 +     + Client 1 +     + Client 3 +    *
   *      +--------+       +--------+       +--------+     *
   *     .............................     ............    *
   *     User 0                            User 1          *
   *                                                       *
   *********************************************************

   One possible environment is to have different client implementations
   operated by the same delivery service, which will look like the
   diagram above, another environment is to have different or same
   clients operated By different delivery services:

              +-----------------+      +-----------------+
             + Deliver Service 1 +    + Deliver Service 2 +
             +                   +    +                   +
              +-----------------+      +--------+--------+
                  |         |                   |
                  |         |                   |      Group
   ***************|*********|*******************|***********
   *              |         |                   |          *
   *              |         |                   |          *
   *      +--------+       +--------+       +--------+     *
   *     + Client 0 +     + Client 1 +     + Client 3 +    *
   *      +--------+       +--------+       +--------+     *
   *     .............................     ............    *
   *     User 0                            User 1          *
   *                                                       *
   *********************************************************

3.1.1.  Key packages

   Key packages (as definded in [I-D.ietf-mls-protocol]) are used to add
   new clients to a group and can thus be considered a bootstraping
   mechanism for the protocol.

3.2.  Authentication Service

   In a federated environment, authentication becomes more important.
   While the sepcifics of an Authentication Service are out-of-scope for
   MLS in general, it is important that strong authentication is
   accessible to all clients of a federated environment.  As an example,
   a shared transparency log like [keytransparency] could be used.

4.  Further considerations

   The following aspects of federated communication are not considered
   in this document:

   *  a common format used for the content application messages

   *  a network protocol used between different server instances

   *  a discovery service to discover clients/users on a specific domain

5.  Use cases

5.1.  Different Delivery Servers

   Different applications operated by different entities can use MLS to
   exchange end-to-end encrypted messages.  For example, in a messaging
   applications, clients of messaging1.tld can encrypt and decrypt end-
   to-end encrypted messages from messaging2.tld.

5.2.  Different client applications

   Different client applications operated by the same server can use MLS
   to exchange end-to-end encrypted handshake and application messages.
   For example, different browsers can implement the MLS protocol, and
   web developers write web applications that use the MLS implementation
   in the browser to encrypt and decrypt the messages.  This will
   require a new standard Web API to allow the client applications to
   set the address of the delivery service in the browser.  A more
   concrete example is using MLS in the browser to negotiate SRTP keys
   for multi-party conference calls.

6.  Functional Requirements

6.1.  Delivery service

   In a federated environment, the different members of a group might
   use different Delivery Services.  Each client SHOULD only connect to
   its respective Deliver Service, which in turn will connect to other
   Delivery Services to relay messages.

   One Delivery Service MUST be responsible for handshake message
   ordering at any given point in time, since TreeKEM requires handshake
   messages to have a total order.  It MUST be clear to all clients and
   Delivery Services of the group which Delivery Service is responsible.
   The different Delivery Services can elect a dedicated Delivery
   Service to be responsible for ordering handshake messages for a
   certain period of time.  The protocol between different delivery
   services is out of the scope of this document.

                               +-----------------+         +---------+
                         +--> + Deliver Service B + +---> + Client B1 +
                         |    +                   +        +---------+
                         |     +-----------------+
                         |
                     +---+-------------+                   +---------+
 +---------+        + Deliver Service A + +-------------> + Client A2 +
+ Client A1 + +---> +                   +                  +---------+
 +---------+         +------+----------+
                         |
                         |     +-----------------+         +---------+
                         +--> + Deliver Service C + +---> + Client C1 +
                              +                   +        +---------+
                               +-----------------+
                                                                                                                                      

7.  Security Considerations

7.1.  Version & ciphersuite negotiation

   In a federated environment, version & ciphersuite negotiation is more
   critical, to avoid forcing a downgrade attack by malicious third
   party Delivery Services.  The negotiation can be done at the
   KeyPackage level.

8.  IANA Considerations

   This document makes no requests of IANA.

9.  References

9.1.  Normative References

   [I-D.ietf-mls-architecture]
              Beurdouche, B., Rescorla, E., Omara, E., Inguva, S., Kwon,
              A., and A. Duric, "The Messaging Layer Security (MLS)
              Architecture", Work in Progress, Internet-Draft, draft-
              ietf-mls-architecture-07, 4 October 2021,
              <https://datatracker.ietf.org/doc/html/draft-ietf-mls-
              architecture-07>.

   [I-D.ietf-mls-protocol]
              Barnes, R., Beurdouche, B., Robert, R., Millican, J.,
              Omara, E., and K. Cohn-Gordon, "The Messaging Layer
              Security (MLS) Protocol", Work in Progress, Internet-
              Draft, draft-ietf-mls-protocol-14, 3 May 2022,
              <https://datatracker.ietf.org/doc/html/draft-ietf-mls-
              protocol-14>.

   [I-D.irtf-cfrg-hpke]
              Barnes, R. L., Bhargavan, K., Lipp, B., and C. A. Wood,
              "Hybrid Public Key Encryption", Work in Progress,
              Internet-Draft, draft-irtf-cfrg-hpke-12, 2 September 2021,
              <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-
              hpke-12>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

9.2.  Informative References

   [keytransparency]
              "Key Transparency", n.d.,
              <https://github.com/google/keytransparency>.

Authors' Addresses

   Emad Omara
   Google
   Email: emadomara@google.com


   Raphael Robert
   Email: ietf@raphaelrobert.com
